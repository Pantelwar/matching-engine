// Code generated by protoc-gen-go. DO NOT EDIT.
// source: engine.proto

package engine

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Side int32

const (
	Side_buy  Side = 0
	Side_sell Side = 1
)

var Side_name = map[int32]string{
	0: "buy",
	1: "sell",
}

var Side_value = map[string]int32{
	"buy":  0,
	"sell": 1,
}

func (x Side) String() string {
	return proto.EnumName(Side_name, int32(x))
}

func (Side) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_770b178c3aab763f, []int{0}
}

type Order struct {
	Type                 Side     `protobuf:"varint,1,opt,name=Type,json=type,proto3,enum=Side" json:"Type,omitempty"`
	ID                   string   `protobuf:"bytes,2,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Amount               string   `protobuf:"bytes,3,opt,name=Amount,json=amount,proto3" json:"Amount,omitempty"`
	Price                string   `protobuf:"bytes,4,opt,name=Price,json=price,proto3" json:"Price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_770b178c3aab763f, []int{0}
}

func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetType() Side {
	if m != nil {
		return m.Type
	}
	return Side_buy
}

func (m *Order) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Order) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Order) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

type OutputOrders struct {
	OrdersProcessed      string   `protobuf:"bytes,1,opt,name=OrdersProcessed,json=orders_processed,proto3" json:"OrdersProcessed,omitempty"`
	PartialOrder         string   `protobuf:"bytes,2,opt,name=PartialOrder,json=partial_order,proto3" json:"PartialOrder,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutputOrders) Reset()         { *m = OutputOrders{} }
func (m *OutputOrders) String() string { return proto.CompactTextString(m) }
func (*OutputOrders) ProtoMessage()    {}
func (*OutputOrders) Descriptor() ([]byte, []int) {
	return fileDescriptor_770b178c3aab763f, []int{1}
}

func (m *OutputOrders) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputOrders.Unmarshal(m, b)
}
func (m *OutputOrders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputOrders.Marshal(b, m, deterministic)
}
func (m *OutputOrders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputOrders.Merge(m, src)
}
func (m *OutputOrders) XXX_Size() int {
	return xxx_messageInfo_OutputOrders.Size(m)
}
func (m *OutputOrders) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputOrders.DiscardUnknown(m)
}

var xxx_messageInfo_OutputOrders proto.InternalMessageInfo

func (m *OutputOrders) GetOrdersProcessed() string {
	if m != nil {
		return m.OrdersProcessed
	}
	return ""
}

func (m *OutputOrders) GetPartialOrder() string {
	if m != nil {
		return m.PartialOrder
	}
	return ""
}

func init() {
	proto.RegisterEnum("Side", Side_name, Side_value)
	proto.RegisterType((*Order)(nil), "Order")
	proto.RegisterType((*OutputOrders)(nil), "OutputOrders")
}

func init() {
	proto.RegisterFile("engine.proto", fileDescriptor_770b178c3aab763f)
}

var fileDescriptor_770b178c3aab763f = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x3f, 0x4f, 0xc3, 0x40,
	0x0c, 0xc5, 0x49, 0x7a, 0xb9, 0x52, 0x2b, 0x2d, 0x91, 0x85, 0x50, 0xca, 0x14, 0x95, 0xa5, 0x74,
	0xc8, 0x50, 0x3e, 0x01, 0x12, 0x0c, 0x4c, 0x8d, 0x02, 0x33, 0x25, 0xed, 0x59, 0xe8, 0xa4, 0x90,
	0x3b, 0xdd, 0x9f, 0x21, 0xdf, 0x1e, 0xd5, 0x2d, 0x12, 0x9b, 0xdf, 0x4f, 0xb6, 0xdf, 0xb3, 0x21,
	0xa7, 0xe1, 0x5b, 0x0f, 0x54, 0x5b, 0x67, 0x82, 0x59, 0x7d, 0x41, 0xb6, 0x73, 0x8a, 0x1c, 0x2e,
	0x41, 0x7c, 0x8c, 0x96, 0xca, 0xa4, 0x4a, 0xd6, 0x8b, 0x6d, 0x56, 0xbf, 0x6b, 0x45, 0xad, 0x08,
	0xa3, 0x25, 0x5c, 0x40, 0xfa, 0xf6, 0x52, 0xa6, 0x55, 0xb2, 0x9e, 0xb5, 0xa9, 0x56, 0x78, 0x07,
	0xf2, 0xf9, 0xc7, 0xc4, 0x21, 0x94, 0x13, 0x66, 0xb2, 0x63, 0x85, 0xb7, 0x90, 0x35, 0x4e, 0x1f,
	0xa9, 0x14, 0x8c, 0x33, 0x7b, 0x12, 0xab, 0x4f, 0xc8, 0x77, 0x31, 0xd8, 0x18, 0xd8, 0xc7, 0xe3,
	0x23, 0xdc, 0x9c, 0xab, 0xc6, 0x99, 0x23, 0x79, 0x4f, 0x8a, 0x3d, 0x67, 0x6d, 0x61, 0x18, 0xef,
	0xed, 0x1f, 0xc7, 0x07, 0xc8, 0x9b, 0xce, 0x05, 0xdd, 0xf5, 0x3c, 0x71, 0x89, 0x30, 0xb7, 0x67,
	0xb6, 0xe7, 0xfe, 0xcd, 0x12, 0xc4, 0x29, 0x2b, 0x4e, 0x61, 0x72, 0x88, 0x63, 0x71, 0x85, 0xd7,
	0x20, 0x3c, 0xf5, 0x7d, 0x91, 0x6c, 0x37, 0x20, 0x5f, 0xf9, 0x58, 0xac, 0x60, 0x7a, 0xb1, 0x43,
	0x59, 0xf3, 0xb2, 0xfb, 0x79, 0xfd, 0x3f, 0xd6, 0x41, 0xf2, 0x3f, 0x9e, 0x7e, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x75, 0x5e, 0xb9, 0x68, 0x1f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EngineClient is the client API for Engine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EngineClient interface {
	Process(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OutputOrders, error)
}

type engineClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineClient(cc grpc.ClientConnInterface) EngineClient {
	return &engineClient{cc}
}

func (c *engineClient) Process(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OutputOrders, error) {
	out := new(OutputOrders)
	err := c.cc.Invoke(ctx, "/Engine/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineServer is the server API for Engine service.
type EngineServer interface {
	Process(context.Context, *Order) (*OutputOrders, error)
}

// UnimplementedEngineServer can be embedded to have forward compatible implementations.
type UnimplementedEngineServer struct {
}

func (*UnimplementedEngineServer) Process(ctx context.Context, req *Order) (*OutputOrders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}

func RegisterEngineServer(s *grpc.Server, srv EngineServer) {
	s.RegisterService(&_Engine_serviceDesc, srv)
}

func _Engine_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Engine/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).Process(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

var _Engine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Engine",
	HandlerType: (*EngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _Engine_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "engine.proto",
}
